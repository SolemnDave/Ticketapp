/* 

import { Construct } from "constructs";
import * as cdk from "aws-cdk-lib";
import * as ec2 from "aws-cdk-lib/aws-ec2";
import * as rds from "aws-cdk-lib/aws-rds";

export class TicketappStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const vpc = ec2.Vpc.fromLookup(this, "DefaultVPC", { isDefault: true });

    const securityGroup = ec2.SecurityGroup.fromSecurityGroupId(
      this,
      "DefaultSG",
      "sg-031357335e9b0fcc8"
    );

    const dbUsername = "USERNAME";
    const dbPassword = "PASSWORD";

    // Creating RDS instance
    const dbInstance = new rds.DatabaseInstance(this, "MyRDSInstance", {
      engine: rds.DatabaseInstanceEngine.mysql({
        version: rds.MysqlEngineVersion.VER_8_0_35,
      }),
      instanceType: ec2.InstanceType.of(
        ec2.InstanceClass.BURSTABLE3,
        ec2.InstanceSize.MICRO
      ),
      vpc,
      credentials: rds.Credentials.fromPassword(
        dbUsername,
        cdk.SecretValue.plainText(dbPassword)
      ),
      multiAz: false,
      allocatedStorage: 20,
      storageType: rds.StorageType.GP2,
      publiclyAccessible: true,
      vpcSubnets: {
        subnetType: ec2.SubnetType.PUBLIC,
      },
      securityGroups: [securityGroup],
      backupRetention: cdk.Duration.days(7),
      deleteAutomatedBackups: true,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      databaseName: "DATABASE NAME",
    });

    new cdk.CfnOutput(this, "DBEndpoint", {
      value: dbInstance.dbInstanceEndpointAddress,
    });
  }
}

*/
